ES exposes a HTTP rest API so all commands are HTTP keywords or called here as HTTP verb

*****************************************************************************

1.  Creating or Deleting Indices
create: PUT /pages
delete: DELETE /pages 

1.1 Creating an index (with settings)
PUT /products
{
  "settings": {
    "number_of_shards": 2,
    "number_of_replicas": 2
  }
}

*****************************************************************************

2.Indexing document with auto generated ID:

POST /products/_doc
{
  "name": "Coffee Maker",
  "price": 64,
  "in_stock": 10
}

PS: doc will be stored on an auto-generated ID and on 3 shards (primary + 2 replicas created in prev step) - replication group 

2.1 Indexing document with custom ID:

PUT /products/_doc/100
{
  "name": "Toaster",
  "price": 49,
  "in_stock": 4
}

*****************************************************************************

3. Retrieving documents by ID

GET /products/_doc/100

PS: If _found key is True then ES gives result under _source key 

*****************************************************************************

4. Updating an existing field

POST /products/_update/100
{
  "doc": {
    "in_stock": 3
  }
}

4.1 Adding a new field

POST /products/_update/100
{
  "doc": {
    "tags": ["electronics"]
  }
}

PS: 
1. ES documents are immutable and Update API in ES takes care of changing values in documents by replacing the document entirely when we use POST verb
2. We get result = updated when the value is changed and result = noop when nothing is changed in a POST request except while using scripting updates. 

*****************************************************************************

5. Scripting updates always display result tag with some value other than noop even if no value is changed

Multiline script is incldued in three commas """ <script> """


5.1 Reducing the current value of in_stock by one

POST /products/_update/100
{
  "script": {
    "source": "ctx._source.in_stock--"
  }
}

5.2 Assigning an arbitrary value to in_stock

POST /products/_update/100
{
  "script": {
    "source": "ctx._source.in_stock = 10"
  }
}

5.3 Using paramters

POST /products/_update/100
{
  "script": {
    "source": "ctx._source.in_stock -= params.quantity",
    "params": {
      "quantity": 4
    }
  }
}

5.4 Conditionally setting the operation to noop

POST /products/_update/100
{
  "script": {
    "source": """
      if (ctx._source.in_stock == 0) {
        ctx.op = 'noop';
      }
      
      ctx._source.in_stock--;
    """
  }
}

5.5 Conditionally update a field value

POST /products/_update/100
{
  "script": {
    "source": """
      if (ctx._source.in_stock > 0) {
        ctx._source.in_stock--;
      }
    """
  }
}

5.6 Conditionally delete a document

POST /products/_update/100
{
  "script": {
    "source": """
      if (ctx._source.in_stock < 0) {
        ctx.op = 'delete';
      }
      
      ctx._source.in_stock--;
    """
  }
}


*****************************************************************************


6. Upset - Content of script are run if document exists else upsert tag creates the document

POST /products/_update/101
{
  "script": {
    "source": "ctx._source.in_stock++"
  },
  "upsert": {
    "name": "Blender",
    "price": 399,
    "in_stock": 5
  }
}

*****************************************************************************

7. Replacing documents

PUT /products/_doc/100
{
  "name": "Toaster",
  "price": 79,
  "in_stock": 4
}

*****************************************************************************

8. Deleting documents
DELETE /products/_doc/101